#!/bin/sh
set -e

### BEGIN INIT INFO
# Provides:           stonehouse
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Should-Start:       cgroupfs-mount cgroup-lite
# Should-Stop:        cgroupfs-mount cgroup-lite
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#  stonehouse.
### END INIT INFO

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

BASE=$(basename $0)

# modify these in /etc/default/$BASE (/etc/default/application)
APPLICATION=etc/init.d/$BASE
# This is the pid file managed by application itself
APPLICATION_PIDFILE=/var/run/$BASE.pid
# This is the pid file created/managed by start-stop-daemon
APPLICATION_SSD_PIDFILE=/var/run/$BASE-ssd.pid
APPLICATION_LOGFILE=/var/log/$BASE.log
APPLICATION_OPTS=
APPLICATION_DESC="Application"

# Get lsb functions
. /lib/lsb/init-functions

if [ -f /etc/default/$BASE ]; then
	. /etc/default/$BASE
fi

# see also init_is_upstart in /lib/lsb/init-functions (which isn't available in Ubuntu 12.04, or we'd use it)
if [ -x /sbin/initctl ] && /sbin/initctl version 2>/dev/null | grep -q upstart; then
	log_failure_msg "$APPLICATION_DESC is managed via upstart, try using service $BASE $1"
	exit 1
fi

# Check application is present
if [ ! -x $APPLICATION ]; then
	log_failure_msg "$APPLICATION not present or not executable"
	exit 1
fi

fail_unless_root() {
	if [ "$(id -u)" != '0' ]; then
		log_failure_msg "$APPLICATION_DESC must be run as root"
		exit 1
	fi
}

cgroupfs_mount() {
	# see also https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount
	if grep -v '^#' /etc/fstab | grep -q cgroup \
		|| [ ! -e /proc/cgroups ] \
		|| [ ! -d /sys/fs/cgroup ]; then
		return
	fi
	if ! mountpoint -q /sys/fs/cgroup; then
		mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
	fi
	(
		cd /sys/fs/cgroup
		for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
			mkdir -p $sys
			if ! mountpoint -q $sys; then
				if ! mount -n -t cgroup -o $sys cgroup $sys; then
					rmdir $sys || true
				fi
			fi
		done
	)
}

devicemapper_umount() {
	# Cleanup any stale mounts left from previous shutdown
	# see https://bugs.launchpad.net/ubuntu/+source/application.io/+bug/1404300
	grep "mapper/application" /proc/mounts | awk '{ print $2 }' | \
		xargs -r umount || true
}

case "$1" in
	start)
		fail_unless_root

		cgroupfs_mount
		devicemapper_umount

		touch "$APPLICATION_LOGFILE"
		chgrp application "$APPLICATION_LOGFILE"

		ulimit -n 1048576
		if [ "$BASH" ]; then
			ulimit -u 1048576
		else
			ulimit -p 1048576
		fi

		log_begin_msg "Starting $APPLICATION_DESC: $BASE"
		start-stop-daemon --start --background \
			--no-close \
			--exec "$APPLICATION" \
			--pidfile "$APPLICATION_SSD_PIDFILE" \
			--make-pidfile \
			-- \
				-d -p "$APPLICATION_PIDFILE" \
				$APPLICATION_OPTS \
					>> "$APPLICATION_LOGFILE" 2>&1
		log_end_msg $?
		;;

	stop)
		fail_unless_root
		log_begin_msg "Stopping $APPLICATION_DESC: $BASE"
		start-stop-daemon --stop --pidfile "$APPLICATION_SSD_PIDFILE"
		log_end_msg $?
		;;

	restart)
		fail_unless_root
		application_pid=`cat "$APPLICATION_SSD_PIDFILE" 2>/dev/null`
		[ -n "$application_pid" ] \
			&& ps -p $application_pid > /dev/null 2>&1 \
			&& $0 stop
		$0 start
		;;

	force-reload)
		fail_unless_root
		$0 restart
		;;

	status)
		status_of_proc -p "$APPLICATION_SSD_PIDFILE" "$APPLICATION" "$APPLICATION_DESC"
		;;

	*)
		echo "Usage: $0 {start|stop|restart|status}"
		exit 1
		;;
esac
